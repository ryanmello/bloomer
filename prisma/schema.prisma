datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  codeName   String   @unique
  discount   Float
  validUntil DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  email    String  @unique
  password String
  image    String?
  role     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shops     Shop[]
  coupons   Coupon[]
  campaigns Campaign[]
}

model Shop {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  name   String
  phone  String
  email  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers Customer[]
  campaigns Campaign[]
}

model Customer {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  email          String    @unique
  phoneNumber    String?
  additionalNote String?
  address        Address[]
  squareId       String?

  // Customer classification for targeting
  customerType String? // "VIP", "New", "Repeat", "Potential"
  isNewsletter Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shopId String @db.ObjectId
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  campaignRecipients CampaignRecipient[]
}

model Address {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  line1   String
  line2   String?
  city    String
  state   String
  zip     String
  country String

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @db.ObjectId
}

model Campaign {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  campaignName String
  subject      String
  emailBody    String

  // Status: Draft, Scheduled, Sent, Failed
  status String @default("Draft")

  // Target audience type: All, VIP, New, Potential, Newsletter, Custom
  audienceType String

  // For scheduled campaigns
  scheduledFor DateTime?
  sentAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  shopId String @db.ObjectId
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  recipients CampaignRecipient[]
}

model CampaignRecipient {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Email delivery status: Pending, Sent, Failed, Opened, Clicked
  status    String    @default("Pending")
  sentAt    DateTime?
  openedAt  DateTime?
  clickedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaignId String   @db.ObjectId
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([campaignId, customerId])
}
